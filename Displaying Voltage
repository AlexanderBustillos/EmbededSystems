#include "lvgl.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "soc/soc_caps.h"
#include "esp_log.h"
#include "esp_adc/adc_oneshot.h"
#include "esp_adc/adc_cali.h"
#include "esp_adc/adc_cali_scheme.h"
#include "esp_sleep.h"

const static char *TAG = "EXAMPLE";
#if CONFIG_IDF_TARGET_ESP32
#define EXAMPLE_ADC1_CHAN0          ADC_CHANNEL_0
#else
#define EXAMPLE_ADC1_CHAN0          ADC_CHANNEL_2
#endif

#if (SOC_ADC_PERIPH_NUM >= 2) && !CONFIG_IDF_TARGET_ESP32C3
#define EXAMPLE_USE_ADC2            1
#endif

#define EXAMPLE_ADC_ATTEN           ADC_ATTEN_DB_12

static int adc_raw[2][10];  // raw storage
static int voltage[2][10];  // voltage storage
static char adc_display_buffer[64];  // converter to store adc as a string 
static bool example_adc_calibration_init(adc_unit_t unit, adc_channel_t channel, adc_atten_t atten, adc_cali_handle_t *out_handle);
static void example_adc_calibration_deinit(adc_cali_handle_t handle);
static bool example_adc_calibration_init(adc_unit_t unit, adc_channel_t channel, adc_atten_t atten, adc_cali_handle_t *out_handle)
{
    adc_cali_handle_t handle = NULL;
    esp_err_t ret = ESP_FAIL;
    bool calibrated = false;

#if ADC_CALI_SCHEME_CURVE_FITTING_SUPPORTED
    if (!calibrated) {
        ESP_LOGI(TAG, "calibration scheme version is %s", "Curve Fitting");
        adc_cali_curve_fitting_config_t cali_config = {
            .unit_id = unit,
            .chan = channel,
            .atten = atten,
            .bitwidth = ADC_BITWIDTH_DEFAULT,
        };
        ret = adc_cali_create_scheme_curve_fitting(&cali_config, &handle);
        if (ret == ESP_OK) {
            calibrated = true;
        }
    }
#endif

#if ADC_CALI_SCHEME_LINE_FITTING_SUPPORTED
    if (!calibrated) {
        ESP_LOGI(TAG, "calibration scheme version is %s", "Line Fitting");
        adc_cali_line_fitting_config_t cali_config = {
            .unit_id = unit,
            .atten = atten,
            .bitwidth = ADC_BITWIDTH_DEFAULT,
        };
        ret = adc_cali_create_scheme_line_fitting(&cali_config, &handle);
        if (ret == ESP_OK) {
            calibrated = true;
        }
    }
#endif

    *out_handle = handle;
    if (ret == ESP_OK) {
        ESP_LOGI(TAG, "Calibration Success");
    } else if (ret == ESP_ERR_NOT_SUPPORTED || !calibrated) {
        ESP_LOGW(TAG, "eFuse not burnt, skip software calibration");
    } else {
        ESP_LOGE(TAG, "Invalid arg or no memory");
    }

    return calibrated;
}

static void example_adc_calibration_deinit(adc_cali_handle_t handle)
{
#if ADC_CALI_SCHEME_CURVE_FITTING_SUPPORTED
    ESP_LOGI(TAG, "deregister %s calibration scheme", "Curve Fitting");
    ESP_ERROR_CHECK(adc_cali_delete_scheme_curve_fitting(handle));

#elif ADC_CALI_SCHEME_LINE_FITTING_SUPPORTED
    ESP_LOGI(TAG, "deregister %s calibration scheme", "Line Fitting");
    ESP_ERROR_CHECK(adc_cali_delete_scheme_line_fitting(handle));
#endif
}

// ADC reading task
void adc_task(void *pvParameter, lv_disp_t *disp)
{
    lv_obj_t *scr = lv_disp_get_scr_act(disp);
    lv_obj_t *label = lv_label_create(scr);         // For ADC readings
    lv_obj_t *sleep_label = lv_label_create(scr);   // For "Sleeping..." message

    // Align the labels
    lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 20);  // ADC readings below the top
    lv_obj_align(sleep_label, LV_ALIGN_CENTER, 0, 0); // "Sleeping..." centered
    lv_label_set_text(sleep_label, "");  // Initially blank

    adc_oneshot_unit_handle_t adc1_handle;
    adc_oneshot_unit_init_cfg_t init_config1 = {
        .unit_id = ADC_UNIT_1,
    };
    ESP_ERROR_CHECK(adc_oneshot_new_unit(&init_config1, &adc1_handle));

    adc_oneshot_chan_cfg_t config = {
        .bitwidth = ADC_BITWIDTH_DEFAULT,
        .atten = EXAMPLE_ADC_ATTEN,
    };
    ESP_ERROR_CHECK(adc_oneshot_config_channel(adc1_handle, EXAMPLE_ADC1_CHAN0, &config));

    adc_cali_handle_t adc1_cali_chan0_handle = NULL;
    bool do_calibration1_chan0 = example_adc_calibration_init(ADC_UNIT_1, EXAMPLE_ADC1_CHAN0, EXAMPLE_ADC_ATTEN, &adc1_cali_chan0_handle);

    while (1) {
		int i = 0;
        // read ADC value
        while (i < 10)
        {
        ESP_ERROR_CHECK(adc_oneshot_read(adc1_handle, EXAMPLE_ADC1_CHAN0, &adc_raw[0][0]));
        ESP_LOGI(TAG, "ADC%d Channel[%d] Raw Data: %d", ADC_UNIT_1 + 1, EXAMPLE_ADC1_CHAN0, adc_raw[0][0]);
        
        if (do_calibration1_chan0) {
            ESP_ERROR_CHECK(adc_cali_raw_to_voltage(adc1_cali_chan0_handle, adc_raw[0][0], &voltage[0][0]));
            ESP_LOGI(TAG, "ADC%d Channel[%d] Cali Voltage: %d mV", ADC_UNIT_1 + 1, EXAMPLE_ADC1_CHAN0, voltage[0][0]);
        }

        // data
        snprintf(adc_display_buffer, sizeof(adc_display_buffer),
                 "Raw ADC: %d\nVoltage: %d mV", adc_raw[0][0], voltage[0][0]);

        // update label
        lv_label_set_text(label, adc_display_buffer);
        vTaskDelay(pdMS_TO_TICKS(1000));
        i = i + 1;
		}
        // diplay for 10 seconds
        vTaskDelay(pdMS_TO_TICKS(100));

        // show "Zzzz" before entering deep sleep
        lv_label_set_text(sleep_label, "Zzzz...");
        lv_label_set_text(label, "");  // Clear ADC readings

        // refresh
        lv_task_handler();
        vTaskDelay(pdMS_TO_TICKS(100)); // delay

        // wakeup after 30 seconds
        ESP_LOGI(TAG, "Sleeping for 30 seconds....");
        esp_sleep_enable_timer_wakeup(30 * 1000000); // 30 seconds in microseconds
        esp_deep_sleep_start();
    }

    // clean, probably will never reach
    ESP_ERROR_CHECK(adc_oneshot_del_unit(adc1_handle));
    if (do_calibration1_chan0) {
        example_adc_calibration_deinit(adc1_cali_chan0_handle);
    }

    vTaskDelete(NULL);
}
// updating task
void lvgl_task(void *pvParameter)
{
    lv_disp_t *disp = (lv_disp_t *)pvParameter;  
    lv_obj_t *scr = lv_disp_get_scr_act(disp); 
    lv_obj_t *label = lv_label_create(scr);  //creating a lavel
    lv_obj_set_width(label, lv_disp_get_hor_res(disp));  // setting width
    lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
    lv_label_set_long_mode(label, LV_LABEL_LONG_SCROLL_CIRCULAR); 

    while (1) {
        // updating todispaly the text
        lv_label_set_text(label, adc_display_buffer);  // display
        vTaskDelay(pdMS_TO_TICKS(100));  //delay
    }
	//nothing basically ending
    vTaskDelete(NULL);
}

void example_lvgl_demo_ui(lv_disp_t *disp)
{
    // creating task for updates, found this on https://forum.lvgl.io/t/esp32c3-how-to-run-a-non-lvgl-task-in-freertos-with-lvgl/14862/3, credits to the, for this.
    xTaskCreate(adc_task, "ADC Task", 2048, NULL, 5, NULL);
}
